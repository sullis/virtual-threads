name: (Java Reusable Workflow) - Prepare Next Snapshot Version

# -----------------------------------------------------------------------------------
# This is a reusable workflow that can be used to adjust the version of a Maven-based
# Java project. The version will be set for all modules in the project and can either
# be explicitly set or, if no version is provided, the current version will be used.
# If the current version is a release version, the version's patch number will be
# incremented and the snapshot suffix will be added. 3.0.0 will become 3.0.1-SNAPSHOT.
# -----------------------------------------------------------------------------------

on:
  workflow_call:
    inputs:
      snapshot-version:
        description: 'Next Snapshot Version'
        required: false
        type: string
        default: ''
    outputs:
      snapshot-version:
        description: 'The semantic version derived/used for the next snapshot'
        value: ${{ jobs.prepare-release.outputs.snapshot-version }}

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      snapshot-version: ${{ steps.prepare-version.outputs.snapshot-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21 for x64
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          architecture: x64
      - name: Prepare version
        id: prepare-version
        run: |
          git pull
          if test -z "${{inputs.snapshot-version}}"
          then
          mvn versions:set -DnextSnapshot=true -DgenerateBackupPoms=false
          else
          mvn versions:set -DnewVersion=${{inputs.snapshot-version}} -DgenerateBackupPoms=false
          fi          
          git diff --quiet . || echo "changed=true" >> $GITHUB_OUTPUT
          echo "snapshot-version=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`" >> $GITHUB_OUTPUT
      - name: Commit version
        if: steps.prepare-version.outputs.changed == 'true'
        run: |
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"
          git commit -am "Set next snapshot version"
          git push
